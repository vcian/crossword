# Laravel Project Rules and Guidelines

## Project Description
This project follows the **Laravel framework (12+)** to build a scalable, secure, and high-performance web application. It implements a structured **Repository Pattern** to separate business logic from controllers, ensuring maintainability and testability.

The project consists of:
- **Backend:** Laravel API with structured repositories.
- **Frontend:** Blade templates with Tailwind CSS and jQuery.
- **Database:** MySQL with Eloquent ORM.
- **Authentication:** Laravel Sanctum for API authentication.
- **Queue Management:** Laravel Queues (default driver).
- **Deployment:** Managed using Nginx with Supervisor and Docker (if applicable).

## Tech Stack & Dependencies
- **Framework**: Laravel 12+
- **PHP Version**: 8.2+
- **Database**: MySQL
- **ORM**: Eloquent
- **Queue Management**: Laravel Queues (default driver)
- **Authentication**: Laravel Sanctum / Passport
- **Testing**: PHPUnit, Laravel Dusk
- **Deployment**: Nginx, Supervisor, Docker (if applicable)
- **Package Manager**: Composer
- **Frontend**: Blade with Tailwind CSS and jQuery

## Folder Structure & Code Organization
- **Backend Code**:
  - `app/Repositories/Backend` → Stores repository classes handling database interactions.
  - `app/Models/Backend` → Stores models related to backend operations.
  - `app/Http/Controllers/Backend` → Contains backend API controllers.

- **Frontend Code**:
  - `app/Repositories/Frontend` → Stores repository classes for frontend-specific logic.
  - `app/Models/Frontend` → Stores frontend-related models.
  - `app/Http/Controllers/Frontend` → Contains frontend API controllers.

- **Common Structures**:
  - `app/Helpers/` → Custom helper functions.
  - `resources/views/backend/` → Blade templates for backend.
  - `resources/views/frontend/` → Blade templates for frontend.
  - `routes/backend.php` → Routes specific to backend functionality.
  - `routes/frontend.php` → Routes specific to frontend functionality.
  - `routes/web.php` → Common web routes.
  - `routes/api.php` → API routes.
  - `config/` → Configuration files.
  - `storage/logs/` → Log files.
  - `bootstrap/cache/` → Cached files.

## Coding Standards & Conventions
- Use **PSR-4 autoloading** for class structure.
- Follow **PSR-12 coding standards**.
- Always define **return types** for functions.

### Example:
```php
/**
* For find user by specific id
* @param int $id
* @return object
**/

public function getUserById(int $id): ?User
{
    return User::find($id);
}
```

## Object-Oriented Programming (OOP) Principles
- **Encapsulation:** Keep properties and methods private/protected where applicable.
- **Abstraction:** Define interfaces for repositories and implement them.
- **Inheritance:** Utilize Laravel’s base classes where applicable (e.g., `Controller`, `Model`).
- **Polymorphism:** Use dependency injection and interface binding in repositories.
- **Separation of Concerns:**
  - **Controllers** should only handle HTTP requests and responses.
  - **Repositories** should manage all data-related logic.
  - **Models** should represent database entities.

## Security Best Practices
- Always validate user input using **Form Requests** or `Validator`.
- Use **CSRF protection** (`@csrf` in forms).
- Store passwords using **bcrypt** or **argon2**.
- Never expose `.env` file or commit it to version control.
- Use **Laravel Policies & Gates** for authorization.
- Sanitize user input to prevent **SQL Injection & XSS attacks**.
- Enforce HTTPS in production (`forceScheme('https')`).
- Limit API rate requests using **throttle middleware**.

## Database & Migrations
- Use **descriptive column names**.
- Always use **foreign keys** with cascade delete to maintain integrity.
- Use **Eloquent relationships** instead of manual joins.
- Use `SoftDeletes` for models that require data recovery.
- Keep migrations clean and avoid modifying existing ones in production.
- Seeders and Factories should be used for testing and development.
- Use **database transactions** for operations requiring rollback.

## API Development (For REST APIs)
- Prefix API routes with `/api/v1/` for versioning.
- Use standardized **success & error responses**.
- Implement **API Resources** to format responses.
- Use **Laravel Sanctum** or **Passport** for API authentication.
- Use rate limiting (`throttle:60,1`) to prevent abuse.
- Return proper HTTP status codes (e.g., `200 OK`, `400 Bad Request`, `404 Not Found`).
- Document APIs using **Swagger (L5 Swagger package)** or Postman collections.

## Deployment & Performance
- Set `APP_ENV=production` and `APP_DEBUG=false` in `.env`.
- Run `php artisan migrate --force` to apply migrations safely.
- Cache configuration & routes:
  ```sh
  php artisan config:cache
  php artisan route:cache
  php artisan view:cache
  ```
- Use **Supervisor** to manage queue workers.
- Enable **OPcache** and **Redis** for improved performance.
- Optimize database queries using **indexing & eager loading (`with()`)**.
- Avoid using `dd()` or `dump()` in production.
- Monitor performance using **Laravel Telescope (only in dev environment)**.
- Set up **queue drivers** like Redis for background jobs.

## Debugging & Logging
- Use **Laravel Debugbar** (only in local environment).
- Never enable `APP_DEBUG=true` in production.
- Use **Monolog** for structured logging.
- Log API requests for debugging:
  ```php
  Log::info('API Request', ['user_id' => auth()->id(), 'request' => request()->all()]);
  ```
- Store logs in separate files for easier debugging (`storage/logs/laravel.log`).
- Monitor logs using external tools like **Sentry** or **Papertrail**.

## Testing & Code Quality
- Write **unit tests** and **feature tests** using PHPUnit.
- Use **Laravel Dusk** for browser testing.
- Mock external dependencies to speed up tests.
- Follow **Test-Driven Development (TDD)** where possible.
- Maintain a high **test coverage percentage**.
- Run tests before pushing changes using:
  ```sh
  php artisan test
  ```
- Use **PHPStan** or **Laravel Pint** for static code analysis.

## Code Reviews & Collaboration
- Follow **Git Flow** for version control (feature branches, PR reviews).
- Use meaningful commit messages:
  ```sh
  git commit -m "[Feature] Implement user authentication"
  ```
- Create **Pull Requests (PRs)** and get them reviewed before merging.
- Follow **coding standards** and avoid unnecessary complexity.
- Use **Laravel Pint** for auto-formatting PHP code.

## Error Handling & Best Practices
- Use **try-catch blocks** for handling exceptions:
  ```php
  try {
      $user = User::findOrFail($id);
  } catch (\Exception $exception) {
      Log::error($exception);
  }
  ```
- Use **Laravel’s Exception Handler** in `app/Exceptions/Handler.php` for global error handling.
- Use `abort(404, 'Not Found')` for handling missing resources.
- Return JSON responses for API errors:
  ```php
  return response()->json(['message' => 'Something went wrong'], 500);
  ```